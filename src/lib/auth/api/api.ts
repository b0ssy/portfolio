/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Definitions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface V1AdminConfigsGet200Response
 */
export interface V1AdminConfigsGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminConfigsGet200ResponseData}
     * @memberof V1AdminConfigsGet200Response
     */
    'data': V1AdminConfigsGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsGet200ResponseData
 */
export interface V1AdminConfigsGet200ResponseData {
    /**
     * 
     * @type {Array<V1AdminConfigsGet200ResponseDataConfigsInner>}
     * @memberof V1AdminConfigsGet200ResponseData
     */
    'configs': Array<V1AdminConfigsGet200ResponseDataConfigsInner>;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsGet200ResponseDataConfigsInner
 */
export interface V1AdminConfigsGet200ResponseDataConfigsInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsGet200ResponseDataConfigsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsGet200ResponseDataConfigsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsGet200ResponseDataConfigsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsGet200ResponseDataConfigsInner
     */
    'key': V1AdminConfigsGet200ResponseDataConfigsInnerKeyEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsGet200ResponseDataConfigsInner
     */
    'value'?: string;
}

export const V1AdminConfigsGet200ResponseDataConfigsInnerKeyEnum = {
    RootApiKey: 'rootApiKey'
} as const;

export type V1AdminConfigsGet200ResponseDataConfigsInnerKeyEnum = typeof V1AdminConfigsGet200ResponseDataConfigsInnerKeyEnum[keyof typeof V1AdminConfigsGet200ResponseDataConfigsInnerKeyEnum];

/**
 * 
 * @export
 * @interface V1AdminEventLogsStatsGet200Response
 */
export interface V1AdminEventLogsStatsGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsStatsGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsStatsGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminEventLogsStatsGet200ResponseData}
     * @memberof V1AdminEventLogsStatsGet200Response
     */
    'data': V1AdminEventLogsStatsGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminEventLogsStatsGet200ResponseData
 */
export interface V1AdminEventLogsStatsGet200ResponseData {
    /**
     * 
     * @type {Array<V1AdminEventLogsStatsGet200ResponseDataStatsInner>}
     * @memberof V1AdminEventLogsStatsGet200ResponseData
     */
    'stats': Array<V1AdminEventLogsStatsGet200ResponseDataStatsInner>;
}
/**
 * 
 * @export
 * @interface V1AdminEventLogsStatsGet200ResponseDataStatsInner
 */
export interface V1AdminEventLogsStatsGet200ResponseDataStatsInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsStatsGet200ResponseDataStatsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsStatsGet200ResponseDataStatsInner
     */
    'type': V1AdminEventLogsStatsGet200ResponseDataStatsInnerTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminEventLogsStatsGet200ResponseDataStatsInner
     */
    'count': number;
}

export const V1AdminEventLogsStatsGet200ResponseDataStatsInnerTypeEnum = {
    SignupEmailpw: 'signup/emailpw',
    SignupUsername: 'signup/username',
    SignupVerifyEmail: 'signup/verify/email',
    ResetpwEmail: 'resetpw/email',
    ResetpwVerifyEmail: 'resetpw/verify/email',
    Login: 'login',
    Logout: 'logout',
    TokensRenew: 'tokens/renew',
    Changepw: 'changepw'
} as const;

export type V1AdminEventLogsStatsGet200ResponseDataStatsInnerTypeEnum = typeof V1AdminEventLogsStatsGet200ResponseDataStatsInnerTypeEnum[keyof typeof V1AdminEventLogsStatsGet200ResponseDataStatsInnerTypeEnum];

/**
 * 
 * @export
 * @interface V1AdminGroupsDelete200Response
 */
export interface V1AdminGroupsDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsDelete200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsDelete200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminUsersDelete200ResponseData}
     * @memberof V1AdminGroupsDelete200Response
     */
    'data': V1AdminUsersDelete200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminGroupsDeleteRequestBody
 */
export interface V1AdminGroupsDeleteRequestBody {
    /**
     * 
     * @type {Array<string>}
     * @memberof V1AdminGroupsDeleteRequestBody
     */
    'groupIds': Array<string>;
}
/**
 * 
 * @export
 * @interface V1AdminGroupsGet200Response
 */
export interface V1AdminGroupsGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminGroupsGet200ResponseData}
     * @memberof V1AdminGroupsGet200Response
     */
    'data': V1AdminGroupsGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminGroupsGet200ResponseData
 */
export interface V1AdminGroupsGet200ResponseData {
    /**
     * 
     * @type {Array<V1LoginPost200ResponseDataRolesInner>}
     * @memberof V1AdminGroupsGet200ResponseData
     */
    'groups': Array<V1LoginPost200ResponseDataRolesInner>;
    /**
     * 
     * @type {number}
     * @memberof V1AdminGroupsGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1AdminGroupsPatch200Response
 */
export interface V1AdminGroupsPatch200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsPatch200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsPatch200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1AdminGroupsPatch200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1AdminGroupsPatchRequestBody
 */
export interface V1AdminGroupsPatchRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsPatchRequestBody
     */
    'groupId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsPatchRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsPatchRequestBody
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface V1AdminGroupsPost200Response
 */
export interface V1AdminGroupsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminGroupsPost200ResponseData}
     * @memberof V1AdminGroupsPost200Response
     */
    'data': V1AdminGroupsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminGroupsPost200ResponseData
 */
export interface V1AdminGroupsPost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsPost200ResponseData
     */
    'groupId': string;
}
/**
 * 
 * @export
 * @interface V1AdminGroupsPostRequestBody
 */
export interface V1AdminGroupsPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsPostRequestBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminGroupsPostRequestBody
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface V1AdminRefreshTokensPatch200Response
 */
export interface V1AdminRefreshTokensPatch200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminRefreshTokensPatch200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminRefreshTokensPatch200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1AdminRefreshTokensPatch200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1AdminRefreshTokensPatchRequestBody
 */
export interface V1AdminRefreshTokensPatchRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminRefreshTokensPatchRequestBody
     */
    'refreshTokenId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminRefreshTokensPatchRequestBody
     */
    'expiredAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminRefreshTokensPatchRequestBody
     */
    'revokedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface V1AdminRolesDelete200Response
 */
export interface V1AdminRolesDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesDelete200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesDelete200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminUsersDelete200ResponseData}
     * @memberof V1AdminRolesDelete200Response
     */
    'data': V1AdminUsersDelete200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminRolesDeleteRequestBody
 */
export interface V1AdminRolesDeleteRequestBody {
    /**
     * 
     * @type {Array<string>}
     * @memberof V1AdminRolesDeleteRequestBody
     */
    'roleIds': Array<string>;
}
/**
 * 
 * @export
 * @interface V1AdminRolesGet200Response
 */
export interface V1AdminRolesGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminRolesGet200ResponseData}
     * @memberof V1AdminRolesGet200Response
     */
    'data': V1AdminRolesGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminRolesGet200ResponseData
 */
export interface V1AdminRolesGet200ResponseData {
    /**
     * 
     * @type {Array<V1LoginPost200ResponseDataRolesInner>}
     * @memberof V1AdminRolesGet200ResponseData
     */
    'roles': Array<V1LoginPost200ResponseDataRolesInner>;
    /**
     * 
     * @type {number}
     * @memberof V1AdminRolesGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1AdminRolesPatch200Response
 */
export interface V1AdminRolesPatch200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesPatch200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesPatch200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1AdminRolesPatch200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1AdminRolesPatchRequestBody
 */
export interface V1AdminRolesPatchRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesPatchRequestBody
     */
    'roleId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesPatchRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesPatchRequestBody
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface V1AdminRolesPost200Response
 */
export interface V1AdminRolesPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminRolesPost200ResponseData}
     * @memberof V1AdminRolesPost200Response
     */
    'data': V1AdminRolesPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminRolesPost200ResponseData
 */
export interface V1AdminRolesPost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesPost200ResponseData
     */
    'roleId': string;
}
/**
 * 
 * @export
 * @interface V1AdminRolesPostRequestBody
 */
export interface V1AdminRolesPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesPostRequestBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminRolesPostRequestBody
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface V1AdminUserGroupsDelete200Response
 */
export interface V1AdminUserGroupsDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserGroupsDelete200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserGroupsDelete200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminUsersDelete200ResponseData}
     * @memberof V1AdminUserGroupsDelete200Response
     */
    'data': V1AdminUsersDelete200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminUserGroupsDeleteRequestBody
 */
export interface V1AdminUserGroupsDeleteRequestBody {
    /**
     * 
     * @type {Array<string>}
     * @memberof V1AdminUserGroupsDeleteRequestBody
     */
    'userGroupIds': Array<string>;
}
/**
 * 
 * @export
 * @interface V1AdminUserGroupsPost200Response
 */
export interface V1AdminUserGroupsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserGroupsPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserGroupsPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminUserGroupsPost200ResponseData}
     * @memberof V1AdminUserGroupsPost200Response
     */
    'data': V1AdminUserGroupsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminUserGroupsPost200ResponseData
 */
export interface V1AdminUserGroupsPost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserGroupsPost200ResponseData
     */
    'userGroupId': string;
}
/**
 * 
 * @export
 * @interface V1AdminUserGroupsPostRequestBody
 */
export interface V1AdminUserGroupsPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserGroupsPostRequestBody
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserGroupsPostRequestBody
     */
    'groupId': string;
}
/**
 * 
 * @export
 * @interface V1AdminUserRolesDelete200Response
 */
export interface V1AdminUserRolesDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserRolesDelete200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserRolesDelete200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminUsersDelete200ResponseData}
     * @memberof V1AdminUserRolesDelete200Response
     */
    'data': V1AdminUsersDelete200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminUserRolesDeleteRequestBody
 */
export interface V1AdminUserRolesDeleteRequestBody {
    /**
     * 
     * @type {Array<string>}
     * @memberof V1AdminUserRolesDeleteRequestBody
     */
    'userRoleIds': Array<string>;
}
/**
 * 
 * @export
 * @interface V1AdminUserRolesPost200Response
 */
export interface V1AdminUserRolesPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserRolesPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserRolesPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminUserRolesPost200ResponseData}
     * @memberof V1AdminUserRolesPost200Response
     */
    'data': V1AdminUserRolesPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminUserRolesPost200ResponseData
 */
export interface V1AdminUserRolesPost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserRolesPost200ResponseData
     */
    'userRoleId': string;
}
/**
 * 
 * @export
 * @interface V1AdminUserRolesPostRequestBody
 */
export interface V1AdminUserRolesPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserRolesPostRequestBody
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUserRolesPostRequestBody
     */
    'roleId': string;
}
/**
 * 
 * @export
 * @interface V1AdminUsersDelete200Response
 */
export interface V1AdminUsersDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersDelete200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersDelete200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminUsersDelete200ResponseData}
     * @memberof V1AdminUsersDelete200Response
     */
    'data': V1AdminUsersDelete200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminUsersDelete200ResponseData
 */
export interface V1AdminUsersDelete200ResponseData {
    /**
     * 
     * @type {number}
     * @memberof V1AdminUsersDelete200ResponseData
     */
    'deleteCount': number;
}
/**
 * 
 * @export
 * @interface V1AdminUsersDeleteRequestBody
 */
export interface V1AdminUsersDeleteRequestBody {
    /**
     * 
     * @type {Array<string>}
     * @memberof V1AdminUsersDeleteRequestBody
     */
    'userIds': Array<string>;
}
/**
 * 
 * @export
 * @interface V1AdminUsersGet200Response
 */
export interface V1AdminUsersGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminUsersGet200ResponseData}
     * @memberof V1AdminUsersGet200Response
     */
    'data': V1AdminUsersGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminUsersGet200ResponseData
 */
export interface V1AdminUsersGet200ResponseData {
    /**
     * 
     * @type {Array<V1AdminUsersGet200ResponseDataUsersInner>}
     * @memberof V1AdminUsersGet200ResponseData
     */
    'users': Array<V1AdminUsersGet200ResponseDataUsersInner>;
    /**
     * 
     * @type {number}
     * @memberof V1AdminUsersGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1AdminUsersGet200ResponseDataUsersInner
 */
export interface V1AdminUsersGet200ResponseDataUsersInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'signupCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'signupCodeSentAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'signupCodeVerifiedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'signupCodeNumTries'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'resetpwCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'resetpwCodeSentAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'resetpwCodeVerifiedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'resetpwCodeNumTries'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'lastLoginAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersGet200ResponseDataUsersInner
     */
    'data'?: string | null;
}
/**
 * 
 * @export
 * @interface V1AdminUsersPatch200Response
 */
export interface V1AdminUsersPatch200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersPatch200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersPatch200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1AdminUsersPatch200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1AdminUsersPatchRequestBody
 */
export interface V1AdminUsersPatchRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersPatchRequestBody
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersPatchRequestBody
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersPatchRequestBody
     */
    'lastName'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1AdminUsersPatchRequestBody
     */
    'roleIds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1AdminUsersPatchRequestBody
     */
    'groupIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface V1AdminUsersPost200Response
 */
export interface V1AdminUsersPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1SignupEmailpwPost200ResponseData}
     * @memberof V1AdminUsersPost200Response
     */
    'data': V1SignupEmailpwPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminUsersPostRequestBody
 */
export interface V1AdminUsersPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersPostRequestBody
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersPostRequestBody
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersPostRequestBody
     */
    'pw'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersPostRequestBody
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersPostRequestBody
     */
    'lastName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof V1AdminUsersPostRequestBody
     */
    'autoVerify'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1AdminUsersPostRequestBody
     */
    'roleIds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1AdminUsersPostRequestBody
     */
    'groupIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface V1AdminUsersUserIdGet200Response
 */
export interface V1AdminUsersUserIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminUsersUserIdGet200ResponseData}
     * @memberof V1AdminUsersUserIdGet200Response
     */
    'data': V1AdminUsersUserIdGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminUsersUserIdGet200ResponseData
 */
export interface V1AdminUsersUserIdGet200ResponseData {
    /**
     * 
     * @type {V1AdminUsersUserIdGet200ResponseDataUser}
     * @memberof V1AdminUsersUserIdGet200ResponseData
     */
    'user': V1AdminUsersUserIdGet200ResponseDataUser;
}
/**
 * 
 * @export
 * @interface V1AdminUsersUserIdGet200ResponseDataUser
 */
export interface V1AdminUsersUserIdGet200ResponseDataUser {
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'signupCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'signupCodeSentAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'signupCodeVerifiedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'signupCodeNumTries'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'resetpwCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'resetpwCodeSentAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'resetpwCodeVerifiedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'resetpwCodeNumTries'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'lastLoginAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'data'?: string | null;
    /**
     * 
     * @type {Array<V1LoginPost200ResponseDataRolesInner>}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'roles': Array<V1LoginPost200ResponseDataRolesInner>;
    /**
     * 
     * @type {Array<V1LoginPost200ResponseDataRolesInner>}
     * @memberof V1AdminUsersUserIdGet200ResponseDataUser
     */
    'groups': Array<V1LoginPost200ResponseDataRolesInner>;
}
/**
 * 
 * @export
 * @interface V1ChangepwPost200Response
 */
export interface V1ChangepwPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1ChangepwPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1ChangepwPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1ChangepwPost200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1ChangepwPostRequestBody
 */
export interface V1ChangepwPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1ChangepwPostRequestBody
     */
    'oldPw': string;
    /**
     * 
     * @type {string}
     * @memberof V1ChangepwPostRequestBody
     */
    'newPw': string;
}
/**
 * 
 * @export
 * @interface V1LoginPost200Response
 */
export interface V1LoginPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1LoginPost200ResponseData}
     * @memberof V1LoginPost200Response
     */
    'data': V1LoginPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1LoginPost200ResponseData
 */
export interface V1LoginPost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200ResponseData
     */
    'userId': string;
    /**
     * 
     * @type {Array<V1LoginPost200ResponseDataRolesInner>}
     * @memberof V1LoginPost200ResponseData
     */
    'roles': Array<V1LoginPost200ResponseDataRolesInner>;
    /**
     * 
     * @type {Array<V1LoginPost200ResponseDataRolesInner>}
     * @memberof V1LoginPost200ResponseData
     */
    'groups': Array<V1LoginPost200ResponseDataRolesInner>;
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200ResponseData
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200ResponseData
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface V1LoginPost200ResponseDataRolesInner
 */
export interface V1LoginPost200ResponseDataRolesInner {
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200ResponseDataRolesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200ResponseDataRolesInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200ResponseDataRolesInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200ResponseDataRolesInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200ResponseDataRolesInner
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface V1LoginPostRequestBody
 */
export interface V1LoginPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1LoginPostRequestBody
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginPostRequestBody
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginPostRequestBody
     */
    'pw': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1LoginPostRequestBody
     */
    'hasRoleNames'?: Array<string>;
}
/**
 * 
 * @export
 * @interface V1LogoutPost200Response
 */
export interface V1LogoutPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1LogoutPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1LogoutPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1LogoutPost200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1LogoutPostRequestBody
 */
export interface V1LogoutPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1LogoutPostRequestBody
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface V1ResetpwEmailPost200Response
 */
export interface V1ResetpwEmailPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1ResetpwEmailPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1ResetpwEmailPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1ResetpwEmailPost200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1ResetpwEmailPostRequestBody
 */
export interface V1ResetpwEmailPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1ResetpwEmailPostRequestBody
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface V1ResetpwVerifyEmailPost200Response
 */
export interface V1ResetpwVerifyEmailPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1ResetpwVerifyEmailPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1ResetpwVerifyEmailPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1ResetpwVerifyEmailPost200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1ResetpwVerifyEmailPostRequestBody
 */
export interface V1ResetpwVerifyEmailPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1ResetpwVerifyEmailPostRequestBody
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof V1ResetpwVerifyEmailPostRequestBody
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface V1SignupEmailpwPost200Response
 */
export interface V1SignupEmailpwPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1SignupEmailpwPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1SignupEmailpwPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1SignupEmailpwPost200ResponseData}
     * @memberof V1SignupEmailpwPost200Response
     */
    'data': V1SignupEmailpwPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1SignupEmailpwPost200ResponseData
 */
export interface V1SignupEmailpwPost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1SignupEmailpwPost200ResponseData
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface V1SignupEmailpwPostRequestBody
 */
export interface V1SignupEmailpwPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1SignupEmailpwPostRequestBody
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof V1SignupEmailpwPostRequestBody
     */
    'pw': string;
    /**
     * 
     * @type {string}
     * @memberof V1SignupEmailpwPostRequestBody
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SignupEmailpwPostRequestBody
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SignupEmailpwPostRequestBody
     */
    'lastName'?: string;
}
/**
 * 
 * @export
 * @interface V1SignupUsernamePost200Response
 */
export interface V1SignupUsernamePost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1SignupUsernamePost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1SignupUsernamePost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1SignupEmailpwPost200ResponseData}
     * @memberof V1SignupUsernamePost200Response
     */
    'data': V1SignupEmailpwPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1SignupUsernamePostRequestBody
 */
export interface V1SignupUsernamePostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1SignupUsernamePostRequestBody
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof V1SignupUsernamePostRequestBody
     */
    'pw': string;
    /**
     * 
     * @type {string}
     * @memberof V1SignupUsernamePostRequestBody
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SignupUsernamePostRequestBody
     */
    'lastName'?: string;
}
/**
 * 
 * @export
 * @interface V1SignupVerifyEmailPost200Response
 */
export interface V1SignupVerifyEmailPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1SignupVerifyEmailPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1SignupVerifyEmailPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1SignupVerifyEmailPost200ResponseData}
     * @memberof V1SignupVerifyEmailPost200Response
     */
    'data': V1SignupVerifyEmailPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1SignupVerifyEmailPost200ResponseData
 */
export interface V1SignupVerifyEmailPost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1SignupVerifyEmailPost200ResponseData
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof V1SignupVerifyEmailPost200ResponseData
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface V1SignupVerifyEmailPostRequestBody
 */
export interface V1SignupVerifyEmailPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1SignupVerifyEmailPostRequestBody
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof V1SignupVerifyEmailPostRequestBody
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface V1TokenPost200Response
 */
export interface V1TokenPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1TokenPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1TokenPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1SignupVerifyEmailPost200ResponseData}
     * @memberof V1TokenPost200Response
     */
    'data': V1SignupVerifyEmailPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1TokenPostRequestBody
 */
export interface V1TokenPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1TokenPostRequestBody
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface V1TokenVerifyPost200Response
 */
export interface V1TokenVerifyPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1TokenVerifyPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1TokenVerifyPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1TokenVerifyPost200Response
     */
    'data': object;
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get configurations
         * @summary Get configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get event logs statistics
         * @summary Get event logs statistics
         * @param {'day'} [interval] 
         * @param {string} [from] 
         * @param {string} [to] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsStatsGet: async (interval?: 'day', from?: string, to?: string, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/event_logs/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete groups
         * @summary Delete groups
         * @param {V1AdminGroupsDeleteRequestBody} v1AdminGroupsDeleteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminGroupsDelete: async (v1AdminGroupsDeleteRequestBody: V1AdminGroupsDeleteRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminGroupsDeleteRequestBody' is not null or undefined
            assertParamExists('v1AdminGroupsDelete', 'v1AdminGroupsDeleteRequestBody', v1AdminGroupsDeleteRequestBody)
            const localVarPath = `/v1/admin/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminGroupsDeleteRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get groups
         * @summary Get groups
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'name' | 'description'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminGroupsGet: async (offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'name' | 'description', sortBy?: 'asc' | 'desc', countOnly?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortColumn !== undefined) {
                localVarQueryParameter['sortColumn'] = sortColumn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (countOnly !== undefined) {
                localVarQueryParameter['countOnly'] = countOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update group
         * @summary Update group
         * @param {V1AdminGroupsPatchRequestBody} v1AdminGroupsPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminGroupsPatch: async (v1AdminGroupsPatchRequestBody: V1AdminGroupsPatchRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminGroupsPatchRequestBody' is not null or undefined
            assertParamExists('v1AdminGroupsPatch', 'v1AdminGroupsPatchRequestBody', v1AdminGroupsPatchRequestBody)
            const localVarPath = `/v1/admin/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminGroupsPatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create group
         * @summary Create group
         * @param {V1AdminGroupsPostRequestBody} v1AdminGroupsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminGroupsPost: async (v1AdminGroupsPostRequestBody: V1AdminGroupsPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminGroupsPostRequestBody' is not null or undefined
            assertParamExists('v1AdminGroupsPost', 'v1AdminGroupsPostRequestBody', v1AdminGroupsPostRequestBody)
            const localVarPath = `/v1/admin/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminGroupsPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update refresh token
         * @summary Update refresh token
         * @param {V1AdminRefreshTokensPatchRequestBody} v1AdminRefreshTokensPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminRefreshTokensPatch: async (v1AdminRefreshTokensPatchRequestBody: V1AdminRefreshTokensPatchRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminRefreshTokensPatchRequestBody' is not null or undefined
            assertParamExists('v1AdminRefreshTokensPatch', 'v1AdminRefreshTokensPatchRequestBody', v1AdminRefreshTokensPatchRequestBody)
            const localVarPath = `/v1/admin/refresh_tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminRefreshTokensPatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete roles
         * @summary Delete roles
         * @param {V1AdminRolesDeleteRequestBody} v1AdminRolesDeleteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminRolesDelete: async (v1AdminRolesDeleteRequestBody: V1AdminRolesDeleteRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminRolesDeleteRequestBody' is not null or undefined
            assertParamExists('v1AdminRolesDelete', 'v1AdminRolesDeleteRequestBody', v1AdminRolesDeleteRequestBody)
            const localVarPath = `/v1/admin/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminRolesDeleteRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get roles
         * @summary Get roles
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'name' | 'description'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminRolesGet: async (offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'name' | 'description', sortBy?: 'asc' | 'desc', countOnly?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortColumn !== undefined) {
                localVarQueryParameter['sortColumn'] = sortColumn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (countOnly !== undefined) {
                localVarQueryParameter['countOnly'] = countOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update role
         * @summary Update role
         * @param {V1AdminRolesPatchRequestBody} v1AdminRolesPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminRolesPatch: async (v1AdminRolesPatchRequestBody: V1AdminRolesPatchRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminRolesPatchRequestBody' is not null or undefined
            assertParamExists('v1AdminRolesPatch', 'v1AdminRolesPatchRequestBody', v1AdminRolesPatchRequestBody)
            const localVarPath = `/v1/admin/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminRolesPatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create role
         * @summary Create role
         * @param {V1AdminRolesPostRequestBody} v1AdminRolesPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminRolesPost: async (v1AdminRolesPostRequestBody: V1AdminRolesPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminRolesPostRequestBody' is not null or undefined
            assertParamExists('v1AdminRolesPost', 'v1AdminRolesPostRequestBody', v1AdminRolesPostRequestBody)
            const localVarPath = `/v1/admin/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminRolesPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete user groups
         * @summary Delete user groups
         * @param {V1AdminUserGroupsDeleteRequestBody} v1AdminUserGroupsDeleteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUserGroupsDelete: async (v1AdminUserGroupsDeleteRequestBody: V1AdminUserGroupsDeleteRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminUserGroupsDeleteRequestBody' is not null or undefined
            assertParamExists('v1AdminUserGroupsDelete', 'v1AdminUserGroupsDeleteRequestBody', v1AdminUserGroupsDeleteRequestBody)
            const localVarPath = `/v1/admin/user_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminUserGroupsDeleteRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create user group
         * @summary Create user group
         * @param {V1AdminUserGroupsPostRequestBody} v1AdminUserGroupsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUserGroupsPost: async (v1AdminUserGroupsPostRequestBody: V1AdminUserGroupsPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminUserGroupsPostRequestBody' is not null or undefined
            assertParamExists('v1AdminUserGroupsPost', 'v1AdminUserGroupsPostRequestBody', v1AdminUserGroupsPostRequestBody)
            const localVarPath = `/v1/admin/user_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminUserGroupsPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete user roles
         * @summary Delete user roles
         * @param {V1AdminUserRolesDeleteRequestBody} v1AdminUserRolesDeleteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUserRolesDelete: async (v1AdminUserRolesDeleteRequestBody: V1AdminUserRolesDeleteRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminUserRolesDeleteRequestBody' is not null or undefined
            assertParamExists('v1AdminUserRolesDelete', 'v1AdminUserRolesDeleteRequestBody', v1AdminUserRolesDeleteRequestBody)
            const localVarPath = `/v1/admin/user_roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminUserRolesDeleteRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create user role
         * @summary Create user role
         * @param {V1AdminUserRolesPostRequestBody} v1AdminUserRolesPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUserRolesPost: async (v1AdminUserRolesPostRequestBody: V1AdminUserRolesPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminUserRolesPostRequestBody' is not null or undefined
            assertParamExists('v1AdminUserRolesPost', 'v1AdminUserRolesPostRequestBody', v1AdminUserRolesPostRequestBody)
            const localVarPath = `/v1/admin/user_roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminUserRolesPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete users
         * @summary Delete users
         * @param {V1AdminUsersDeleteRequestBody} v1AdminUsersDeleteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUsersDelete: async (v1AdminUsersDeleteRequestBody: V1AdminUsersDeleteRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminUsersDeleteRequestBody' is not null or undefined
            assertParamExists('v1AdminUsersDelete', 'v1AdminUsersDeleteRequestBody', v1AdminUsersDeleteRequestBody)
            const localVarPath = `/v1/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminUsersDeleteRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get users
         * @summary Get users
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'email' | 'username' | 'hashedPw' | 'signupCode' | 'signupCodeSentAt' | 'signupCodeVerifiedAt' | 'signupCodeNumTries' | 'resetpwCode' | 'resetpwCodeSentAt' | 'resetpwCodeVerifiedAt' | 'resetpwCodeNumTries' | 'lastLoginAt' | 'firstName' | 'lastName' | 'data'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUsersGet: async (offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'email' | 'username' | 'hashedPw' | 'signupCode' | 'signupCodeSentAt' | 'signupCodeVerifiedAt' | 'signupCodeNumTries' | 'resetpwCode' | 'resetpwCodeSentAt' | 'resetpwCodeVerifiedAt' | 'resetpwCodeNumTries' | 'lastLoginAt' | 'firstName' | 'lastName' | 'data', sortBy?: 'asc' | 'desc', countOnly?: boolean, username?: string, email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortColumn !== undefined) {
                localVarQueryParameter['sortColumn'] = sortColumn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (countOnly !== undefined) {
                localVarQueryParameter['countOnly'] = countOnly;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user
         * @summary Update user
         * @param {V1AdminUsersPatchRequestBody} v1AdminUsersPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUsersPatch: async (v1AdminUsersPatchRequestBody: V1AdminUsersPatchRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminUsersPatchRequestBody' is not null or undefined
            assertParamExists('v1AdminUsersPatch', 'v1AdminUsersPatchRequestBody', v1AdminUsersPatchRequestBody)
            const localVarPath = `/v1/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminUsersPatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create user
         * @summary Create user
         * @param {V1AdminUsersPostRequestBody} v1AdminUsersPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUsersPost: async (v1AdminUsersPostRequestBody: V1AdminUsersPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminUsersPostRequestBody' is not null or undefined
            assertParamExists('v1AdminUsersPost', 'v1AdminUsersPostRequestBody', v1AdminUsersPostRequestBody)
            const localVarPath = `/v1/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminUsersPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user
         * @summary Get user
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUsersUserIdGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('v1AdminUsersUserIdGet', 'userId', userId)
            const localVarPath = `/v1/admin/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * Get configurations
         * @summary Get configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminConfigsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminConfigsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminConfigsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get event logs statistics
         * @summary Get event logs statistics
         * @param {'day'} [interval] 
         * @param {string} [from] 
         * @param {string} [to] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminEventLogsStatsGet(interval?: 'day', from?: string, to?: string, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminEventLogsStatsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminEventLogsStatsGet(interval, from, to, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete groups
         * @summary Delete groups
         * @param {V1AdminGroupsDeleteRequestBody} v1AdminGroupsDeleteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminGroupsDelete(v1AdminGroupsDeleteRequestBody: V1AdminGroupsDeleteRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminGroupsDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminGroupsDelete(v1AdminGroupsDeleteRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get groups
         * @summary Get groups
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'name' | 'description'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminGroupsGet(offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'name' | 'description', sortBy?: 'asc' | 'desc', countOnly?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminGroupsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminGroupsGet(offset, limit, sortColumn, sortBy, countOnly, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update group
         * @summary Update group
         * @param {V1AdminGroupsPatchRequestBody} v1AdminGroupsPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminGroupsPatch(v1AdminGroupsPatchRequestBody: V1AdminGroupsPatchRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminGroupsPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminGroupsPatch(v1AdminGroupsPatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create group
         * @summary Create group
         * @param {V1AdminGroupsPostRequestBody} v1AdminGroupsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminGroupsPost(v1AdminGroupsPostRequestBody: V1AdminGroupsPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminGroupsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminGroupsPost(v1AdminGroupsPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update refresh token
         * @summary Update refresh token
         * @param {V1AdminRefreshTokensPatchRequestBody} v1AdminRefreshTokensPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminRefreshTokensPatch(v1AdminRefreshTokensPatchRequestBody: V1AdminRefreshTokensPatchRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminRefreshTokensPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminRefreshTokensPatch(v1AdminRefreshTokensPatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete roles
         * @summary Delete roles
         * @param {V1AdminRolesDeleteRequestBody} v1AdminRolesDeleteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminRolesDelete(v1AdminRolesDeleteRequestBody: V1AdminRolesDeleteRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminRolesDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminRolesDelete(v1AdminRolesDeleteRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get roles
         * @summary Get roles
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'name' | 'description'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminRolesGet(offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'name' | 'description', sortBy?: 'asc' | 'desc', countOnly?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminRolesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminRolesGet(offset, limit, sortColumn, sortBy, countOnly, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update role
         * @summary Update role
         * @param {V1AdminRolesPatchRequestBody} v1AdminRolesPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminRolesPatch(v1AdminRolesPatchRequestBody: V1AdminRolesPatchRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminRolesPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminRolesPatch(v1AdminRolesPatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create role
         * @summary Create role
         * @param {V1AdminRolesPostRequestBody} v1AdminRolesPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminRolesPost(v1AdminRolesPostRequestBody: V1AdminRolesPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminRolesPost(v1AdminRolesPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete user groups
         * @summary Delete user groups
         * @param {V1AdminUserGroupsDeleteRequestBody} v1AdminUserGroupsDeleteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminUserGroupsDelete(v1AdminUserGroupsDeleteRequestBody: V1AdminUserGroupsDeleteRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminUserGroupsDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminUserGroupsDelete(v1AdminUserGroupsDeleteRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create user group
         * @summary Create user group
         * @param {V1AdminUserGroupsPostRequestBody} v1AdminUserGroupsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminUserGroupsPost(v1AdminUserGroupsPostRequestBody: V1AdminUserGroupsPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminUserGroupsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminUserGroupsPost(v1AdminUserGroupsPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete user roles
         * @summary Delete user roles
         * @param {V1AdminUserRolesDeleteRequestBody} v1AdminUserRolesDeleteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminUserRolesDelete(v1AdminUserRolesDeleteRequestBody: V1AdminUserRolesDeleteRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminUserRolesDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminUserRolesDelete(v1AdminUserRolesDeleteRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create user role
         * @summary Create user role
         * @param {V1AdminUserRolesPostRequestBody} v1AdminUserRolesPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminUserRolesPost(v1AdminUserRolesPostRequestBody: V1AdminUserRolesPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminUserRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminUserRolesPost(v1AdminUserRolesPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete users
         * @summary Delete users
         * @param {V1AdminUsersDeleteRequestBody} v1AdminUsersDeleteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminUsersDelete(v1AdminUsersDeleteRequestBody: V1AdminUsersDeleteRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminUsersDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminUsersDelete(v1AdminUsersDeleteRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get users
         * @summary Get users
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'email' | 'username' | 'hashedPw' | 'signupCode' | 'signupCodeSentAt' | 'signupCodeVerifiedAt' | 'signupCodeNumTries' | 'resetpwCode' | 'resetpwCodeSentAt' | 'resetpwCodeVerifiedAt' | 'resetpwCodeNumTries' | 'lastLoginAt' | 'firstName' | 'lastName' | 'data'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminUsersGet(offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'email' | 'username' | 'hashedPw' | 'signupCode' | 'signupCodeSentAt' | 'signupCodeVerifiedAt' | 'signupCodeNumTries' | 'resetpwCode' | 'resetpwCodeSentAt' | 'resetpwCodeVerifiedAt' | 'resetpwCodeNumTries' | 'lastLoginAt' | 'firstName' | 'lastName' | 'data', sortBy?: 'asc' | 'desc', countOnly?: boolean, username?: string, email?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminUsersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminUsersGet(offset, limit, sortColumn, sortBy, countOnly, username, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update user
         * @summary Update user
         * @param {V1AdminUsersPatchRequestBody} v1AdminUsersPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminUsersPatch(v1AdminUsersPatchRequestBody: V1AdminUsersPatchRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminUsersPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminUsersPatch(v1AdminUsersPatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create user
         * @summary Create user
         * @param {V1AdminUsersPostRequestBody} v1AdminUsersPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminUsersPost(v1AdminUsersPostRequestBody: V1AdminUsersPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminUsersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminUsersPost(v1AdminUsersPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user
         * @summary Get user
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminUsersUserIdGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminUsersUserIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminUsersUserIdGet(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * Get configurations
         * @summary Get configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsGet(options?: AxiosRequestConfig): AxiosPromise<V1AdminConfigsGet200Response> {
            return localVarFp.v1AdminConfigsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get event logs statistics
         * @summary Get event logs statistics
         * @param {AdminApiV1AdminEventLogsStatsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsStatsGet(requestParameters: AdminApiV1AdminEventLogsStatsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminEventLogsStatsGet200Response> {
            return localVarFp.v1AdminEventLogsStatsGet(requestParameters.interval, requestParameters.from, requestParameters.to, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete groups
         * @summary Delete groups
         * @param {AdminApiV1AdminGroupsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminGroupsDelete(requestParameters: AdminApiV1AdminGroupsDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminGroupsDelete200Response> {
            return localVarFp.v1AdminGroupsDelete(requestParameters.v1AdminGroupsDeleteRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get groups
         * @summary Get groups
         * @param {AdminApiV1AdminGroupsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminGroupsGet(requestParameters: AdminApiV1AdminGroupsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminGroupsGet200Response> {
            return localVarFp.v1AdminGroupsGet(requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Update group
         * @summary Update group
         * @param {AdminApiV1AdminGroupsPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminGroupsPatch(requestParameters: AdminApiV1AdminGroupsPatchRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminGroupsPatch200Response> {
            return localVarFp.v1AdminGroupsPatch(requestParameters.v1AdminGroupsPatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create group
         * @summary Create group
         * @param {AdminApiV1AdminGroupsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminGroupsPost(requestParameters: AdminApiV1AdminGroupsPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminGroupsPost200Response> {
            return localVarFp.v1AdminGroupsPost(requestParameters.v1AdminGroupsPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update refresh token
         * @summary Update refresh token
         * @param {AdminApiV1AdminRefreshTokensPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminRefreshTokensPatch(requestParameters: AdminApiV1AdminRefreshTokensPatchRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminRefreshTokensPatch200Response> {
            return localVarFp.v1AdminRefreshTokensPatch(requestParameters.v1AdminRefreshTokensPatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete roles
         * @summary Delete roles
         * @param {AdminApiV1AdminRolesDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminRolesDelete(requestParameters: AdminApiV1AdminRolesDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminRolesDelete200Response> {
            return localVarFp.v1AdminRolesDelete(requestParameters.v1AdminRolesDeleteRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get roles
         * @summary Get roles
         * @param {AdminApiV1AdminRolesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminRolesGet(requestParameters: AdminApiV1AdminRolesGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminRolesGet200Response> {
            return localVarFp.v1AdminRolesGet(requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Update role
         * @summary Update role
         * @param {AdminApiV1AdminRolesPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminRolesPatch(requestParameters: AdminApiV1AdminRolesPatchRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminRolesPatch200Response> {
            return localVarFp.v1AdminRolesPatch(requestParameters.v1AdminRolesPatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create role
         * @summary Create role
         * @param {AdminApiV1AdminRolesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminRolesPost(requestParameters: AdminApiV1AdminRolesPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminRolesPost200Response> {
            return localVarFp.v1AdminRolesPost(requestParameters.v1AdminRolesPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete user groups
         * @summary Delete user groups
         * @param {AdminApiV1AdminUserGroupsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUserGroupsDelete(requestParameters: AdminApiV1AdminUserGroupsDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminUserGroupsDelete200Response> {
            return localVarFp.v1AdminUserGroupsDelete(requestParameters.v1AdminUserGroupsDeleteRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create user group
         * @summary Create user group
         * @param {AdminApiV1AdminUserGroupsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUserGroupsPost(requestParameters: AdminApiV1AdminUserGroupsPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminUserGroupsPost200Response> {
            return localVarFp.v1AdminUserGroupsPost(requestParameters.v1AdminUserGroupsPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete user roles
         * @summary Delete user roles
         * @param {AdminApiV1AdminUserRolesDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUserRolesDelete(requestParameters: AdminApiV1AdminUserRolesDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminUserRolesDelete200Response> {
            return localVarFp.v1AdminUserRolesDelete(requestParameters.v1AdminUserRolesDeleteRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create user role
         * @summary Create user role
         * @param {AdminApiV1AdminUserRolesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUserRolesPost(requestParameters: AdminApiV1AdminUserRolesPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminUserRolesPost200Response> {
            return localVarFp.v1AdminUserRolesPost(requestParameters.v1AdminUserRolesPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete users
         * @summary Delete users
         * @param {AdminApiV1AdminUsersDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUsersDelete(requestParameters: AdminApiV1AdminUsersDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminUsersDelete200Response> {
            return localVarFp.v1AdminUsersDelete(requestParameters.v1AdminUsersDeleteRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get users
         * @summary Get users
         * @param {AdminApiV1AdminUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUsersGet(requestParameters: AdminApiV1AdminUsersGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminUsersGet200Response> {
            return localVarFp.v1AdminUsersGet(requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.username, requestParameters.email, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user
         * @summary Update user
         * @param {AdminApiV1AdminUsersPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUsersPatch(requestParameters: AdminApiV1AdminUsersPatchRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminUsersPatch200Response> {
            return localVarFp.v1AdminUsersPatch(requestParameters.v1AdminUsersPatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create user
         * @summary Create user
         * @param {AdminApiV1AdminUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUsersPost(requestParameters: AdminApiV1AdminUsersPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminUsersPost200Response> {
            return localVarFp.v1AdminUsersPost(requestParameters.v1AdminUsersPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user
         * @summary Get user
         * @param {AdminApiV1AdminUsersUserIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminUsersUserIdGet(requestParameters: AdminApiV1AdminUsersUserIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminUsersUserIdGet200Response> {
            return localVarFp.v1AdminUsersUserIdGet(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1AdminEventLogsStatsGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminEventLogsStatsGetRequest
 */
export interface AdminApiV1AdminEventLogsStatsGetRequest {
    /**
     * 
     * @type {'day'}
     * @memberof AdminApiV1AdminEventLogsStatsGet
     */
    readonly interval?: 'day'

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminEventLogsStatsGet
     */
    readonly from?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminEventLogsStatsGet
     */
    readonly to?: string

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminEventLogsStatsGet
     */
    readonly offset?: number
}

/**
 * Request parameters for v1AdminGroupsDelete operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminGroupsDeleteRequest
 */
export interface AdminApiV1AdminGroupsDeleteRequest {
    /**
     * 
     * @type {V1AdminGroupsDeleteRequestBody}
     * @memberof AdminApiV1AdminGroupsDelete
     */
    readonly v1AdminGroupsDeleteRequestBody: V1AdminGroupsDeleteRequestBody
}

/**
 * Request parameters for v1AdminGroupsGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminGroupsGetRequest
 */
export interface AdminApiV1AdminGroupsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminGroupsGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminGroupsGet
     */
    readonly limit?: number

    /**
     * 
     * @type {'id' | 'createdAt' | 'updatedAt' | 'name' | 'description'}
     * @memberof AdminApiV1AdminGroupsGet
     */
    readonly sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'name' | 'description'

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof AdminApiV1AdminGroupsGet
     */
    readonly sortBy?: 'asc' | 'desc'

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminGroupsGet
     */
    readonly countOnly?: boolean
}

/**
 * Request parameters for v1AdminGroupsPatch operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminGroupsPatchRequest
 */
export interface AdminApiV1AdminGroupsPatchRequest {
    /**
     * 
     * @type {V1AdminGroupsPatchRequestBody}
     * @memberof AdminApiV1AdminGroupsPatch
     */
    readonly v1AdminGroupsPatchRequestBody: V1AdminGroupsPatchRequestBody
}

/**
 * Request parameters for v1AdminGroupsPost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminGroupsPostRequest
 */
export interface AdminApiV1AdminGroupsPostRequest {
    /**
     * 
     * @type {V1AdminGroupsPostRequestBody}
     * @memberof AdminApiV1AdminGroupsPost
     */
    readonly v1AdminGroupsPostRequestBody: V1AdminGroupsPostRequestBody
}

/**
 * Request parameters for v1AdminRefreshTokensPatch operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminRefreshTokensPatchRequest
 */
export interface AdminApiV1AdminRefreshTokensPatchRequest {
    /**
     * 
     * @type {V1AdminRefreshTokensPatchRequestBody}
     * @memberof AdminApiV1AdminRefreshTokensPatch
     */
    readonly v1AdminRefreshTokensPatchRequestBody: V1AdminRefreshTokensPatchRequestBody
}

/**
 * Request parameters for v1AdminRolesDelete operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminRolesDeleteRequest
 */
export interface AdminApiV1AdminRolesDeleteRequest {
    /**
     * 
     * @type {V1AdminRolesDeleteRequestBody}
     * @memberof AdminApiV1AdminRolesDelete
     */
    readonly v1AdminRolesDeleteRequestBody: V1AdminRolesDeleteRequestBody
}

/**
 * Request parameters for v1AdminRolesGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminRolesGetRequest
 */
export interface AdminApiV1AdminRolesGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminRolesGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminRolesGet
     */
    readonly limit?: number

    /**
     * 
     * @type {'id' | 'createdAt' | 'updatedAt' | 'name' | 'description'}
     * @memberof AdminApiV1AdminRolesGet
     */
    readonly sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'name' | 'description'

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof AdminApiV1AdminRolesGet
     */
    readonly sortBy?: 'asc' | 'desc'

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminRolesGet
     */
    readonly countOnly?: boolean
}

/**
 * Request parameters for v1AdminRolesPatch operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminRolesPatchRequest
 */
export interface AdminApiV1AdminRolesPatchRequest {
    /**
     * 
     * @type {V1AdminRolesPatchRequestBody}
     * @memberof AdminApiV1AdminRolesPatch
     */
    readonly v1AdminRolesPatchRequestBody: V1AdminRolesPatchRequestBody
}

/**
 * Request parameters for v1AdminRolesPost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminRolesPostRequest
 */
export interface AdminApiV1AdminRolesPostRequest {
    /**
     * 
     * @type {V1AdminRolesPostRequestBody}
     * @memberof AdminApiV1AdminRolesPost
     */
    readonly v1AdminRolesPostRequestBody: V1AdminRolesPostRequestBody
}

/**
 * Request parameters for v1AdminUserGroupsDelete operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminUserGroupsDeleteRequest
 */
export interface AdminApiV1AdminUserGroupsDeleteRequest {
    /**
     * 
     * @type {V1AdminUserGroupsDeleteRequestBody}
     * @memberof AdminApiV1AdminUserGroupsDelete
     */
    readonly v1AdminUserGroupsDeleteRequestBody: V1AdminUserGroupsDeleteRequestBody
}

/**
 * Request parameters for v1AdminUserGroupsPost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminUserGroupsPostRequest
 */
export interface AdminApiV1AdminUserGroupsPostRequest {
    /**
     * 
     * @type {V1AdminUserGroupsPostRequestBody}
     * @memberof AdminApiV1AdminUserGroupsPost
     */
    readonly v1AdminUserGroupsPostRequestBody: V1AdminUserGroupsPostRequestBody
}

/**
 * Request parameters for v1AdminUserRolesDelete operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminUserRolesDeleteRequest
 */
export interface AdminApiV1AdminUserRolesDeleteRequest {
    /**
     * 
     * @type {V1AdminUserRolesDeleteRequestBody}
     * @memberof AdminApiV1AdminUserRolesDelete
     */
    readonly v1AdminUserRolesDeleteRequestBody: V1AdminUserRolesDeleteRequestBody
}

/**
 * Request parameters for v1AdminUserRolesPost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminUserRolesPostRequest
 */
export interface AdminApiV1AdminUserRolesPostRequest {
    /**
     * 
     * @type {V1AdminUserRolesPostRequestBody}
     * @memberof AdminApiV1AdminUserRolesPost
     */
    readonly v1AdminUserRolesPostRequestBody: V1AdminUserRolesPostRequestBody
}

/**
 * Request parameters for v1AdminUsersDelete operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminUsersDeleteRequest
 */
export interface AdminApiV1AdminUsersDeleteRequest {
    /**
     * 
     * @type {V1AdminUsersDeleteRequestBody}
     * @memberof AdminApiV1AdminUsersDelete
     */
    readonly v1AdminUsersDeleteRequestBody: V1AdminUsersDeleteRequestBody
}

/**
 * Request parameters for v1AdminUsersGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminUsersGetRequest
 */
export interface AdminApiV1AdminUsersGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminUsersGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminUsersGet
     */
    readonly limit?: number

    /**
     * 
     * @type {'id' | 'createdAt' | 'updatedAt' | 'email' | 'username' | 'hashedPw' | 'signupCode' | 'signupCodeSentAt' | 'signupCodeVerifiedAt' | 'signupCodeNumTries' | 'resetpwCode' | 'resetpwCodeSentAt' | 'resetpwCodeVerifiedAt' | 'resetpwCodeNumTries' | 'lastLoginAt' | 'firstName' | 'lastName' | 'data'}
     * @memberof AdminApiV1AdminUsersGet
     */
    readonly sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'email' | 'username' | 'hashedPw' | 'signupCode' | 'signupCodeSentAt' | 'signupCodeVerifiedAt' | 'signupCodeNumTries' | 'resetpwCode' | 'resetpwCodeSentAt' | 'resetpwCodeVerifiedAt' | 'resetpwCodeNumTries' | 'lastLoginAt' | 'firstName' | 'lastName' | 'data'

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof AdminApiV1AdminUsersGet
     */
    readonly sortBy?: 'asc' | 'desc'

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminUsersGet
     */
    readonly countOnly?: boolean

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminUsersGet
     */
    readonly username?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminUsersGet
     */
    readonly email?: string
}

/**
 * Request parameters for v1AdminUsersPatch operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminUsersPatchRequest
 */
export interface AdminApiV1AdminUsersPatchRequest {
    /**
     * 
     * @type {V1AdminUsersPatchRequestBody}
     * @memberof AdminApiV1AdminUsersPatch
     */
    readonly v1AdminUsersPatchRequestBody: V1AdminUsersPatchRequestBody
}

/**
 * Request parameters for v1AdminUsersPost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminUsersPostRequest
 */
export interface AdminApiV1AdminUsersPostRequest {
    /**
     * 
     * @type {V1AdminUsersPostRequestBody}
     * @memberof AdminApiV1AdminUsersPost
     */
    readonly v1AdminUsersPostRequestBody: V1AdminUsersPostRequestBody
}

/**
 * Request parameters for v1AdminUsersUserIdGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminUsersUserIdGetRequest
 */
export interface AdminApiV1AdminUsersUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminUsersUserIdGet
     */
    readonly userId: string
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * Get configurations
     * @summary Get configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminConfigsGet(options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminConfigsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get event logs statistics
     * @summary Get event logs statistics
     * @param {AdminApiV1AdminEventLogsStatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminEventLogsStatsGet(requestParameters: AdminApiV1AdminEventLogsStatsGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminEventLogsStatsGet(requestParameters.interval, requestParameters.from, requestParameters.to, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete groups
     * @summary Delete groups
     * @param {AdminApiV1AdminGroupsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminGroupsDelete(requestParameters: AdminApiV1AdminGroupsDeleteRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminGroupsDelete(requestParameters.v1AdminGroupsDeleteRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get groups
     * @summary Get groups
     * @param {AdminApiV1AdminGroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminGroupsGet(requestParameters: AdminApiV1AdminGroupsGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminGroupsGet(requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update group
     * @summary Update group
     * @param {AdminApiV1AdminGroupsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminGroupsPatch(requestParameters: AdminApiV1AdminGroupsPatchRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminGroupsPatch(requestParameters.v1AdminGroupsPatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create group
     * @summary Create group
     * @param {AdminApiV1AdminGroupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminGroupsPost(requestParameters: AdminApiV1AdminGroupsPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminGroupsPost(requestParameters.v1AdminGroupsPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update refresh token
     * @summary Update refresh token
     * @param {AdminApiV1AdminRefreshTokensPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminRefreshTokensPatch(requestParameters: AdminApiV1AdminRefreshTokensPatchRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminRefreshTokensPatch(requestParameters.v1AdminRefreshTokensPatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete roles
     * @summary Delete roles
     * @param {AdminApiV1AdminRolesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminRolesDelete(requestParameters: AdminApiV1AdminRolesDeleteRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminRolesDelete(requestParameters.v1AdminRolesDeleteRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get roles
     * @summary Get roles
     * @param {AdminApiV1AdminRolesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminRolesGet(requestParameters: AdminApiV1AdminRolesGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminRolesGet(requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update role
     * @summary Update role
     * @param {AdminApiV1AdminRolesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminRolesPatch(requestParameters: AdminApiV1AdminRolesPatchRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminRolesPatch(requestParameters.v1AdminRolesPatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create role
     * @summary Create role
     * @param {AdminApiV1AdminRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminRolesPost(requestParameters: AdminApiV1AdminRolesPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminRolesPost(requestParameters.v1AdminRolesPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete user groups
     * @summary Delete user groups
     * @param {AdminApiV1AdminUserGroupsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminUserGroupsDelete(requestParameters: AdminApiV1AdminUserGroupsDeleteRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminUserGroupsDelete(requestParameters.v1AdminUserGroupsDeleteRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create user group
     * @summary Create user group
     * @param {AdminApiV1AdminUserGroupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminUserGroupsPost(requestParameters: AdminApiV1AdminUserGroupsPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminUserGroupsPost(requestParameters.v1AdminUserGroupsPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete user roles
     * @summary Delete user roles
     * @param {AdminApiV1AdminUserRolesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminUserRolesDelete(requestParameters: AdminApiV1AdminUserRolesDeleteRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminUserRolesDelete(requestParameters.v1AdminUserRolesDeleteRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create user role
     * @summary Create user role
     * @param {AdminApiV1AdminUserRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminUserRolesPost(requestParameters: AdminApiV1AdminUserRolesPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminUserRolesPost(requestParameters.v1AdminUserRolesPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete users
     * @summary Delete users
     * @param {AdminApiV1AdminUsersDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminUsersDelete(requestParameters: AdminApiV1AdminUsersDeleteRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminUsersDelete(requestParameters.v1AdminUsersDeleteRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get users
     * @summary Get users
     * @param {AdminApiV1AdminUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminUsersGet(requestParameters: AdminApiV1AdminUsersGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminUsersGet(requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.username, requestParameters.email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update user
     * @summary Update user
     * @param {AdminApiV1AdminUsersPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminUsersPatch(requestParameters: AdminApiV1AdminUsersPatchRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminUsersPatch(requestParameters.v1AdminUsersPatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create user
     * @summary Create user
     * @param {AdminApiV1AdminUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminUsersPost(requestParameters: AdminApiV1AdminUsersPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminUsersPost(requestParameters.v1AdminUsersPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user
     * @summary Get user
     * @param {AdminApiV1AdminUsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminUsersUserIdGet(requestParameters: AdminApiV1AdminUsersUserIdGetRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminUsersUserIdGet(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change password
         * @summary Change password
         * @param {V1ChangepwPostRequestBody} v1ChangepwPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChangepwPost: async (v1ChangepwPostRequestBody: V1ChangepwPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1ChangepwPostRequestBody' is not null or undefined
            assertParamExists('v1ChangepwPost', 'v1ChangepwPostRequestBody', v1ChangepwPostRequestBody)
            const localVarPath = `/v1/changepw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1ChangepwPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login account
         * @summary Login account
         * @param {V1LoginPostRequestBody} v1LoginPostRequestBody 
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LoginPost: async (v1LoginPostRequestBody: V1LoginPostRequestBody, userAgent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1LoginPostRequestBody' is not null or undefined
            assertParamExists('v1LoginPost', 'v1LoginPostRequestBody', v1LoginPostRequestBody)
            const localVarPath = `/v1/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userAgent != null) {
                localVarHeaderParameter['user-agent'] = String(userAgent);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1LoginPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logout account
         * @summary Logout account
         * @param {V1LogoutPostRequestBody} v1LogoutPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LogoutPost: async (v1LogoutPostRequestBody: V1LogoutPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1LogoutPostRequestBody' is not null or undefined
            assertParamExists('v1LogoutPost', 'v1LogoutPostRequestBody', v1LogoutPostRequestBody)
            const localVarPath = `/v1/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1LogoutPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset password for email
         * @summary Reset password for email
         * @param {V1ResetpwEmailPostRequestBody} v1ResetpwEmailPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResetpwEmailPost: async (v1ResetpwEmailPostRequestBody: V1ResetpwEmailPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1ResetpwEmailPostRequestBody' is not null or undefined
            assertParamExists('v1ResetpwEmailPost', 'v1ResetpwEmailPostRequestBody', v1ResetpwEmailPostRequestBody)
            const localVarPath = `/v1/resetpw/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1ResetpwEmailPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify reset password for email
         * @summary Verify reset password for email
         * @param {V1ResetpwVerifyEmailPostRequestBody} v1ResetpwVerifyEmailPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResetpwVerifyEmailPost: async (v1ResetpwVerifyEmailPostRequestBody: V1ResetpwVerifyEmailPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1ResetpwVerifyEmailPostRequestBody' is not null or undefined
            assertParamExists('v1ResetpwVerifyEmailPost', 'v1ResetpwVerifyEmailPostRequestBody', v1ResetpwVerifyEmailPostRequestBody)
            const localVarPath = `/v1/resetpw/verify/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1ResetpwVerifyEmailPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Signup account using email and password
         * @summary Signup account using email and password
         * @param {V1SignupEmailpwPostRequestBody} v1SignupEmailpwPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignupEmailpwPost: async (v1SignupEmailpwPostRequestBody: V1SignupEmailpwPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1SignupEmailpwPostRequestBody' is not null or undefined
            assertParamExists('v1SignupEmailpwPost', 'v1SignupEmailpwPostRequestBody', v1SignupEmailpwPostRequestBody)
            const localVarPath = `/v1/signup/emailpw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1SignupEmailpwPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Signup account using username and password
         * @summary Signup account using username and password
         * @param {V1SignupUsernamePostRequestBody} v1SignupUsernamePostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignupUsernamePost: async (v1SignupUsernamePostRequestBody: V1SignupUsernamePostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1SignupUsernamePostRequestBody' is not null or undefined
            assertParamExists('v1SignupUsernamePost', 'v1SignupUsernamePostRequestBody', v1SignupUsernamePostRequestBody)
            const localVarPath = `/v1/signup/username`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1SignupUsernamePostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify signup account using email
         * @summary Verify signup account using email
         * @param {V1SignupVerifyEmailPostRequestBody} v1SignupVerifyEmailPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignupVerifyEmailPost: async (v1SignupVerifyEmailPostRequestBody: V1SignupVerifyEmailPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1SignupVerifyEmailPostRequestBody' is not null or undefined
            assertParamExists('v1SignupVerifyEmailPost', 'v1SignupVerifyEmailPostRequestBody', v1SignupVerifyEmailPostRequestBody)
            const localVarPath = `/v1/signup/verify/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1SignupVerifyEmailPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Renew tokens
         * @summary Renew tokens
         * @param {V1TokenPostRequestBody} v1TokenPostRequestBody 
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TokenPost: async (v1TokenPostRequestBody: V1TokenPostRequestBody, userAgent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1TokenPostRequestBody' is not null or undefined
            assertParamExists('v1TokenPost', 'v1TokenPostRequestBody', v1TokenPostRequestBody)
            const localVarPath = `/v1/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userAgent != null) {
                localVarHeaderParameter['user-agent'] = String(userAgent);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1TokenPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify access token
         * @summary Verify access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TokenVerifyPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/token/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Change password
         * @summary Change password
         * @param {V1ChangepwPostRequestBody} v1ChangepwPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChangepwPost(v1ChangepwPostRequestBody: V1ChangepwPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ChangepwPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChangepwPost(v1ChangepwPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Login account
         * @summary Login account
         * @param {V1LoginPostRequestBody} v1LoginPostRequestBody 
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LoginPost(v1LoginPostRequestBody: V1LoginPostRequestBody, userAgent?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1LoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LoginPost(v1LoginPostRequestBody, userAgent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Logout account
         * @summary Logout account
         * @param {V1LogoutPostRequestBody} v1LogoutPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LogoutPost(v1LogoutPostRequestBody: V1LogoutPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1LogoutPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LogoutPost(v1LogoutPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reset password for email
         * @summary Reset password for email
         * @param {V1ResetpwEmailPostRequestBody} v1ResetpwEmailPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResetpwEmailPost(v1ResetpwEmailPostRequestBody: V1ResetpwEmailPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ResetpwEmailPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResetpwEmailPost(v1ResetpwEmailPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify reset password for email
         * @summary Verify reset password for email
         * @param {V1ResetpwVerifyEmailPostRequestBody} v1ResetpwVerifyEmailPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResetpwVerifyEmailPost(v1ResetpwVerifyEmailPostRequestBody: V1ResetpwVerifyEmailPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ResetpwVerifyEmailPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResetpwVerifyEmailPost(v1ResetpwVerifyEmailPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Signup account using email and password
         * @summary Signup account using email and password
         * @param {V1SignupEmailpwPostRequestBody} v1SignupEmailpwPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SignupEmailpwPost(v1SignupEmailpwPostRequestBody: V1SignupEmailpwPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1SignupEmailpwPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignupEmailpwPost(v1SignupEmailpwPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Signup account using username and password
         * @summary Signup account using username and password
         * @param {V1SignupUsernamePostRequestBody} v1SignupUsernamePostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SignupUsernamePost(v1SignupUsernamePostRequestBody: V1SignupUsernamePostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1SignupUsernamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignupUsernamePost(v1SignupUsernamePostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify signup account using email
         * @summary Verify signup account using email
         * @param {V1SignupVerifyEmailPostRequestBody} v1SignupVerifyEmailPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SignupVerifyEmailPost(v1SignupVerifyEmailPostRequestBody: V1SignupVerifyEmailPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1SignupVerifyEmailPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SignupVerifyEmailPost(v1SignupVerifyEmailPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Renew tokens
         * @summary Renew tokens
         * @param {V1TokenPostRequestBody} v1TokenPostRequestBody 
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TokenPost(v1TokenPostRequestBody: V1TokenPostRequestBody, userAgent?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TokenPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TokenPost(v1TokenPostRequestBody, userAgent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify access token
         * @summary Verify access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TokenVerifyPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TokenVerifyPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TokenVerifyPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Change password
         * @summary Change password
         * @param {AuthenticationApiV1ChangepwPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChangepwPost(requestParameters: AuthenticationApiV1ChangepwPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1ChangepwPost200Response> {
            return localVarFp.v1ChangepwPost(requestParameters.v1ChangepwPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Login account
         * @summary Login account
         * @param {AuthenticationApiV1LoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LoginPost(requestParameters: AuthenticationApiV1LoginPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1LoginPost200Response> {
            return localVarFp.v1LoginPost(requestParameters.v1LoginPostRequestBody, requestParameters.userAgent, options).then((request) => request(axios, basePath));
        },
        /**
         * Logout account
         * @summary Logout account
         * @param {AuthenticationApiV1LogoutPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LogoutPost(requestParameters: AuthenticationApiV1LogoutPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1LogoutPost200Response> {
            return localVarFp.v1LogoutPost(requestParameters.v1LogoutPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset password for email
         * @summary Reset password for email
         * @param {AuthenticationApiV1ResetpwEmailPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResetpwEmailPost(requestParameters: AuthenticationApiV1ResetpwEmailPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1ResetpwEmailPost200Response> {
            return localVarFp.v1ResetpwEmailPost(requestParameters.v1ResetpwEmailPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify reset password for email
         * @summary Verify reset password for email
         * @param {AuthenticationApiV1ResetpwVerifyEmailPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResetpwVerifyEmailPost(requestParameters: AuthenticationApiV1ResetpwVerifyEmailPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1ResetpwVerifyEmailPost200Response> {
            return localVarFp.v1ResetpwVerifyEmailPost(requestParameters.v1ResetpwVerifyEmailPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Signup account using email and password
         * @summary Signup account using email and password
         * @param {AuthenticationApiV1SignupEmailpwPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignupEmailpwPost(requestParameters: AuthenticationApiV1SignupEmailpwPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1SignupEmailpwPost200Response> {
            return localVarFp.v1SignupEmailpwPost(requestParameters.v1SignupEmailpwPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Signup account using username and password
         * @summary Signup account using username and password
         * @param {AuthenticationApiV1SignupUsernamePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignupUsernamePost(requestParameters: AuthenticationApiV1SignupUsernamePostRequest, options?: AxiosRequestConfig): AxiosPromise<V1SignupUsernamePost200Response> {
            return localVarFp.v1SignupUsernamePost(requestParameters.v1SignupUsernamePostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify signup account using email
         * @summary Verify signup account using email
         * @param {AuthenticationApiV1SignupVerifyEmailPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SignupVerifyEmailPost(requestParameters: AuthenticationApiV1SignupVerifyEmailPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1SignupVerifyEmailPost200Response> {
            return localVarFp.v1SignupVerifyEmailPost(requestParameters.v1SignupVerifyEmailPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Renew tokens
         * @summary Renew tokens
         * @param {AuthenticationApiV1TokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TokenPost(requestParameters: AuthenticationApiV1TokenPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1TokenPost200Response> {
            return localVarFp.v1TokenPost(requestParameters.v1TokenPostRequestBody, requestParameters.userAgent, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify access token
         * @summary Verify access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TokenVerifyPost(options?: AxiosRequestConfig): AxiosPromise<V1TokenVerifyPost200Response> {
            return localVarFp.v1TokenVerifyPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1ChangepwPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiV1ChangepwPostRequest
 */
export interface AuthenticationApiV1ChangepwPostRequest {
    /**
     * 
     * @type {V1ChangepwPostRequestBody}
     * @memberof AuthenticationApiV1ChangepwPost
     */
    readonly v1ChangepwPostRequestBody: V1ChangepwPostRequestBody
}

/**
 * Request parameters for v1LoginPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiV1LoginPostRequest
 */
export interface AuthenticationApiV1LoginPostRequest {
    /**
     * 
     * @type {V1LoginPostRequestBody}
     * @memberof AuthenticationApiV1LoginPost
     */
    readonly v1LoginPostRequestBody: V1LoginPostRequestBody

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiV1LoginPost
     */
    readonly userAgent?: string
}

/**
 * Request parameters for v1LogoutPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiV1LogoutPostRequest
 */
export interface AuthenticationApiV1LogoutPostRequest {
    /**
     * 
     * @type {V1LogoutPostRequestBody}
     * @memberof AuthenticationApiV1LogoutPost
     */
    readonly v1LogoutPostRequestBody: V1LogoutPostRequestBody
}

/**
 * Request parameters for v1ResetpwEmailPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiV1ResetpwEmailPostRequest
 */
export interface AuthenticationApiV1ResetpwEmailPostRequest {
    /**
     * 
     * @type {V1ResetpwEmailPostRequestBody}
     * @memberof AuthenticationApiV1ResetpwEmailPost
     */
    readonly v1ResetpwEmailPostRequestBody: V1ResetpwEmailPostRequestBody
}

/**
 * Request parameters for v1ResetpwVerifyEmailPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiV1ResetpwVerifyEmailPostRequest
 */
export interface AuthenticationApiV1ResetpwVerifyEmailPostRequest {
    /**
     * 
     * @type {V1ResetpwVerifyEmailPostRequestBody}
     * @memberof AuthenticationApiV1ResetpwVerifyEmailPost
     */
    readonly v1ResetpwVerifyEmailPostRequestBody: V1ResetpwVerifyEmailPostRequestBody
}

/**
 * Request parameters for v1SignupEmailpwPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiV1SignupEmailpwPostRequest
 */
export interface AuthenticationApiV1SignupEmailpwPostRequest {
    /**
     * 
     * @type {V1SignupEmailpwPostRequestBody}
     * @memberof AuthenticationApiV1SignupEmailpwPost
     */
    readonly v1SignupEmailpwPostRequestBody: V1SignupEmailpwPostRequestBody
}

/**
 * Request parameters for v1SignupUsernamePost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiV1SignupUsernamePostRequest
 */
export interface AuthenticationApiV1SignupUsernamePostRequest {
    /**
     * 
     * @type {V1SignupUsernamePostRequestBody}
     * @memberof AuthenticationApiV1SignupUsernamePost
     */
    readonly v1SignupUsernamePostRequestBody: V1SignupUsernamePostRequestBody
}

/**
 * Request parameters for v1SignupVerifyEmailPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiV1SignupVerifyEmailPostRequest
 */
export interface AuthenticationApiV1SignupVerifyEmailPostRequest {
    /**
     * 
     * @type {V1SignupVerifyEmailPostRequestBody}
     * @memberof AuthenticationApiV1SignupVerifyEmailPost
     */
    readonly v1SignupVerifyEmailPostRequestBody: V1SignupVerifyEmailPostRequestBody
}

/**
 * Request parameters for v1TokenPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiV1TokenPostRequest
 */
export interface AuthenticationApiV1TokenPostRequest {
    /**
     * 
     * @type {V1TokenPostRequestBody}
     * @memberof AuthenticationApiV1TokenPost
     */
    readonly v1TokenPostRequestBody: V1TokenPostRequestBody

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiV1TokenPost
     */
    readonly userAgent?: string
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Change password
     * @summary Change password
     * @param {AuthenticationApiV1ChangepwPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public v1ChangepwPost(requestParameters: AuthenticationApiV1ChangepwPostRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).v1ChangepwPost(requestParameters.v1ChangepwPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login account
     * @summary Login account
     * @param {AuthenticationApiV1LoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public v1LoginPost(requestParameters: AuthenticationApiV1LoginPostRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).v1LoginPost(requestParameters.v1LoginPostRequestBody, requestParameters.userAgent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logout account
     * @summary Logout account
     * @param {AuthenticationApiV1LogoutPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public v1LogoutPost(requestParameters: AuthenticationApiV1LogoutPostRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).v1LogoutPost(requestParameters.v1LogoutPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset password for email
     * @summary Reset password for email
     * @param {AuthenticationApiV1ResetpwEmailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public v1ResetpwEmailPost(requestParameters: AuthenticationApiV1ResetpwEmailPostRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).v1ResetpwEmailPost(requestParameters.v1ResetpwEmailPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify reset password for email
     * @summary Verify reset password for email
     * @param {AuthenticationApiV1ResetpwVerifyEmailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public v1ResetpwVerifyEmailPost(requestParameters: AuthenticationApiV1ResetpwVerifyEmailPostRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).v1ResetpwVerifyEmailPost(requestParameters.v1ResetpwVerifyEmailPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Signup account using email and password
     * @summary Signup account using email and password
     * @param {AuthenticationApiV1SignupEmailpwPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public v1SignupEmailpwPost(requestParameters: AuthenticationApiV1SignupEmailpwPostRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).v1SignupEmailpwPost(requestParameters.v1SignupEmailpwPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Signup account using username and password
     * @summary Signup account using username and password
     * @param {AuthenticationApiV1SignupUsernamePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public v1SignupUsernamePost(requestParameters: AuthenticationApiV1SignupUsernamePostRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).v1SignupUsernamePost(requestParameters.v1SignupUsernamePostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify signup account using email
     * @summary Verify signup account using email
     * @param {AuthenticationApiV1SignupVerifyEmailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public v1SignupVerifyEmailPost(requestParameters: AuthenticationApiV1SignupVerifyEmailPostRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).v1SignupVerifyEmailPost(requestParameters.v1SignupVerifyEmailPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Renew tokens
     * @summary Renew tokens
     * @param {AuthenticationApiV1TokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public v1TokenPost(requestParameters: AuthenticationApiV1TokenPostRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).v1TokenPost(requestParameters.v1TokenPostRequestBody, requestParameters.userAgent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify access token
     * @summary Verify access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public v1TokenVerifyPost(options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).v1TokenVerifyPost(options).then((request) => request(this.axios, this.basePath));
    }
}


